GRF estimate:
   c_buf_usage:           64
   gmem_load_usage:       24
   slm_store_usage:       0
   slm_load_usage:        32
   reorder_usage:         16
   max_reuse_header_regs: 4
GRF estimate:
   c_buf_usage:           64
   gmem_load_usage:       24
   slm_store_usage:       0
   slm_load_usage:        32
   reorder_usage:         16
   max_reuse_header_regs: 4
=== TRY config:
  HW config:                  XeHPG, stepping: 0, EUs: 512, max TG: 16, SIMD: 8, regs: 256
  Problem:                    mb1g1ic1id1ih1024iw1024oc1od1oh1024ow1024kd1kh3kw3pd0ph1pw1
  Source layout:              1a1b1024c1024d2b:f16
  Weights layout:             1a1b3c3d8a2b:f16
  Destination layout:         1a1b1024c1024d16b:f16
  Dimension ow:               (grid:   16) x (tg:    4) x (thr:    1) x (iter:   16)
  Dimension kh:               (grid:    1) x (tg:    1) x (thr:    3) x (iter:    1)
  Dimension ic:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:    2)
  Dimension oc:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:   32)
  Dimension kw:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:    8)
  Kernel grid:                1 x 16384 x 1
  Thread group:               1 x 4 x 1
  Threads:                    65536 (utilization: 100% thread, 100% wave)
  FMA kind:                   dpas
  SLM buffering:              A: False, B: True, buffers: 1, pad: True
  GRF buffers for GMEM load:  1
  Prefetch:                   False, buffers: 0
  Do pipeline unroll:         False
  Assign SBIDs:               True
  Reduce GRF usage:           True
  Reuse headers:              True
  Allow GRF reorder:          True
  Sub-tiles:                  A: 1, B: 1
  Estimated GRF usage:        156

Configuration:
  HW config:                  XeHPG, stepping: 0, EUs: 512, max TG: 16, SIMD: 8, regs: 256
  Problem:                    mb1g1ic1id1ih1024iw1024oc1od1oh1024ow1024kd1kh3kw3pd0ph1pw1
  Source layout:              1a1b1024c1024d2b:f16
  Weights layout:             1a1b3c3d8a2b:f16
  Destination layout:         1a1b1024c1024d16b:f16
  Dimension ow:               (grid:   16) x (tg:    4) x (thr:    1) x (iter:   16)
  Dimension kh:               (grid:    1) x (tg:    1) x (thr:    3) x (iter:    1)
  Dimension ic:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:    2)
  Dimension oc:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:   32)
  Dimension kw:               (grid:    1) x (tg:    1) x (thr:    1) x (iter:    8)
  Kernel grid:                1 x 16384 x 1
  Thread group:               1 x 4 x 1
  Threads:                    65536 (utilization: 100% thread, 100% wave)
  FMA kind:                   dpas
  SLM buffering:              A: False, B: True, buffers: 1, pad: True
  GRF buffers for GMEM load:  1
  Prefetch:                   False, buffers: 0
  Do pipeline unroll:         False
  Assign SBIDs:               True
  Reduce GRF usage:           True
  Reuse headers:              True
  Allow GRF reorder:          True
  Sub-tiles:                  A: 1, B: 1
  Estimated GRF usage:        156
B GMEM to GRF load:
Memory view:          1x8x2x1x1x8 vstart: [[0, (tg_idx1 * 8), 0, 0, kh, 0]] tlayout: 1b1c3e3f8b2c:f16
Register layout:      8f8b2c:f16
Register buffer:      g2s_0
Register buffer size: 256 (8 regs)
Statement:            
load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))

B GRF to SLM store:
Memory view:          1x8x2x1x1x8 tlayout: 8f8b2c:f16 offset: (0 + ((((0 + (tg_idx1 * 8)) / 8) * 128) + ((((0 + (tg_idx1 * 8)) % 8) * 2) + 0)))
Register layout:      8f8b2c:f16
Register buffer:      g2s_0
Register buffer size: 256 (8 regs)
Statement:            
store.owordx16(b_slm, (tg_idx1 * 256), g2s_0[0], bcast16(true), (nil), (nil))

A GMEM/SLM to GRF load #0:
Memory view:          1x1x2x1x1x16x1x1x8 vstart: [[0, 0, 0, 0, oh, ((ow_outer * 64) + (ow_inner_outer * 16)), 0, kh, 0]] tlayout: 1a1b1c1024e1024f2c:f16
Register layout:      16f8i2c:f16
Register buffer:      a
Register buffer size: 512 (16 regs)
Statement:            
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 28)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 28)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 28)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 28)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 28)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 28)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 28)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 28)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))

B GMEM/SLM to GRF load #0:
Memory view:          1x32x2x1x1x8 tlayout: 4b8f8b2c:f16
Register layout:      4b8f8b2c:f16
Register buffer:      b
Register buffer size: 1024 (32 regs)
Statement:            
load.owordx16(b_slm, 0, b[0], bcast16(true), (nil), (nil))
load.owordx16(b_slm, 256, b[256], bcast16(true), (nil), (nil))
load.owordx16(b_slm, 512, b[512], bcast16(true), (nil), (nil))
load.owordx16(b_slm, 768, b[768], bcast16(true), (nil), (nil))

Multiply (0, 0):
dpas.8x8(c[0], c[0], b[0], a[0])
dpas.8x8(c[256], c[256], b[0], a[256])
dpas.8x8(c[512], c[512], b[256], a[0])
dpas.8x8(c[768], c[768], b[256], a[256])
dpas.8x8(c[1024], c[1024], b[512], a[0])
dpas.8x8(c[1280], c[1280], b[512], a[256])
dpas.8x8(c[1536], c[1536], b[768], a[0])
dpas.8x8(c[1792], c[1792], b[768], a[256])

Creating epilogue with parameters: tile_size = 512, preload_max_size = 512, post_op_blk = 8
C GRF to GMEM store:
alloc c_tmp_0[512] (mem_usage: 512)
reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
alloc c_tmp_1[512] (mem_usage: 512)
reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 128), c_tmp_1[128], bcast16(false), (nil), (nil))
store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 256), c_tmp_1[256], bcast16(false), (nil), (nil))
store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 384), c_tmp_1[384], bcast16(false), (nil), (nil))

=== After inject_external_var_let
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = (local_id0 / 8)
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = (mb_inner_outer_ow_inner_outer_fused / 4)
ow_inner_outer.s32 = ((mb_inner_outer_ow_inner_outer_fused / 1) % 4)
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = (g_outer_od_oh_ow_outer_fused / 16384)
od.s32 = ((g_outer_od_oh_ow_outer_fused / 16384) % 1)
oh.s32 = ((g_outer_od_oh_ow_outer_fused / 16) % 1024)
ow_outer.s32 = ((g_outer_od_oh_ow_outer_fused / 1) % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2126)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3150)
alloc a[512] (mem_usage: 3662)
alloc g2s_0[256] (mem_usage: 3918)
alloc b_slm[1024] (mem_usage: 3918)
compute_loop {
  for (ic_outer = 0; ic_outer < 1; ic_outer++) {
    for (kd = 0; kd < 1; kd++) {
      for (kh = 0; kh < 3; kh++) {
        for (kw_outer = 0; kw_outer < 1; kw_outer++) {
          g2s_load {
            load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
            load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
            load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))
          }
          barrier()
          g2s_store {
            store.owordx16(b_slm, (tg_idx1 * 256), g2s_0[0], bcast16(true), (nil), (nil))
          }
          barrier()
          g2r_load {
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 28)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 28)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 28)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 28)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 28)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 28)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 28)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 28)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))
          }
          s2r_load {
            load.owordx16(b_slm, 0, b[0], bcast16(true), (nil), (nil))
            load.owordx16(b_slm, 256, b[256], bcast16(true), (nil), (nil))
            load.owordx16(b_slm, 512, b[512], bcast16(true), (nil), (nil))
            load.owordx16(b_slm, 768, b[768], bcast16(true), (nil), (nil))
          }
          mul {
            dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
            dpas.8x8(c[256], c[256], b[0], a[256])
            dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
            dpas.8x8(c[768], c[768], b[256], a[256])
            dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
            dpas.8x8(c[1280], c[1280], b[512], a[256])
            dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
            dpas.8x8(c[1792], c[1792], b[768], a[256])
          }
        }
      }
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2638)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
  alloc c_tmp_1[512] (mem_usage: 2638)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 128), c_tmp_1[128], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 256), c_tmp_1[256], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 384), c_tmp_1[384], bcast16(false), (nil), (nil))
}

=== After merge_slm_buffers
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = (local_id0 / 8)
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = (mb_inner_outer_ow_inner_outer_fused / 4)
ow_inner_outer.s32 = ((mb_inner_outer_ow_inner_outer_fused / 1) % 4)
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = (g_outer_od_oh_ow_outer_fused / 16384)
od.s32 = ((g_outer_od_oh_ow_outer_fused / 16384) % 1)
oh.s32 = ((g_outer_od_oh_ow_outer_fused / 16) % 1024)
ow_outer.s32 = ((g_outer_od_oh_ow_outer_fused / 1) % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2126)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3150)
alloc a[512] (mem_usage: 3662)
alloc g2s_0[256] (mem_usage: 3918)
compute_loop {
  for (ic_outer = 0; ic_outer < 1; ic_outer++) {
    for (kd = 0; kd < 1; kd++) {
      for (kh = 0; kh < 3; kh++) {
        for (kw_outer = 0; kw_outer < 1; kw_outer++) {
          g2s_load {
            load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
            load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
            load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))
          }
          barrier()
          g2s_store {
            store.owordx16(slm[0], (tg_idx1 * 256), g2s_0[0], bcast16(true), (nil), (nil))
          }
          barrier()
          g2r_load {
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 28)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 28)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 28)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 28)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 28)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 28)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 28)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 28)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))
          }
          s2r_load {
            load.owordx16(slm[0], 0, b[0], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 256, b[256], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 512, b[512], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 768, b[768], bcast16(true), (nil), (nil))
          }
          mul {
            dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
            dpas.8x8(c[256], c[256], b[0], a[256])
            dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
            dpas.8x8(c[768], c[768], b[256], a[256])
            dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
            dpas.8x8(c[1280], c[1280], b[512], a[256])
            dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
            dpas.8x8(c[1792], c[1792], b[768], a[256])
          }
        }
      }
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2638)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
  alloc c_tmp_1[512] (mem_usage: 2638)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 128), c_tmp_1[128], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 256), c_tmp_1[256], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 384), c_tmp_1[384], bcast16(false), (nil), (nil))
}

=== After inject_simple_slm_buffering
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = (local_id0 / 8)
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = (mb_inner_outer_ow_inner_outer_fused / 4)
ow_inner_outer.s32 = ((mb_inner_outer_ow_inner_outer_fused / 1) % 4)
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = (g_outer_od_oh_ow_outer_fused / 16384)
od.s32 = ((g_outer_od_oh_ow_outer_fused / 16384) % 1)
oh.s32 = ((g_outer_od_oh_ow_outer_fused / 16) % 1024)
ow_outer.s32 = ((g_outer_od_oh_ow_outer_fused / 1) % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2126)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3150)
alloc a[512] (mem_usage: 3662)
alloc g2s_0[256] (mem_usage: 3918)
compute_loop {
  for (ic_outer = 0; ic_outer < 1; ic_outer++) {
    for (kd = 0; kd < 1; kd++) {
      for (kh = 0; kh < 3; kh++) {
        for (kw_outer = 0; kw_outer < 1; kw_outer++) {
          g2s_load {
            load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
            load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
            load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))
          }
          barrier()
          g2s_store {
            store.owordx16(slm[0], (tg_idx1 * 256), g2s_0[0], bcast16(true), (nil), (nil))
          }
          barrier()
          g2r_load {
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 28)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 28)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 28)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 28)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 28)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 28)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 28)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 28)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))
          }
          s2r_load {
            load.owordx16(slm[0], 0, b[0], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 256, b[256], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 512, b[512], bcast16(true), (nil), (nil))
            load.owordx16(slm[0], 768, b[768], bcast16(true), (nil), (nil))
          }
          mul {
            dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
            dpas.8x8(c[256], c[256], b[0], a[256])
            dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
            dpas.8x8(c[768], c[768], b[256], a[256])
            dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
            dpas.8x8(c[1280], c[1280], b[512], a[256])
            dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
            dpas.8x8(c[1792], c[1792], b[768], a[256])
          }
        }
      }
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2638)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
  alloc c_tmp_1[512] (mem_usage: 2638)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 128), c_tmp_1[128], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 256), c_tmp_1[256], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 384), c_tmp_1[384], bcast16(false), (nil), (nil))
}

=== After lift_buffer_offsets_in_send
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = (local_id0 / 8)
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = (mb_inner_outer_ow_inner_outer_fused / 4)
ow_inner_outer.s32 = ((mb_inner_outer_ow_inner_outer_fused / 1) % 4)
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = (g_outer_od_oh_ow_outer_fused / 16384)
od.s32 = ((g_outer_od_oh_ow_outer_fused / 16384) % 1)
oh.s32 = ((g_outer_od_oh_ow_outer_fused / 16) % 1024)
ow_outer.s32 = ((g_outer_od_oh_ow_outer_fused / 1) % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2126)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3150)
alloc a[512] (mem_usage: 3662)
alloc g2s_0[256] (mem_usage: 3918)
compute_loop {
  for (ic_outer = 0; ic_outer < 1; ic_outer++) {
    for (kd = 0; kd < 1; kd++) {
      for (kh = 0; kh < 3; kh++) {
        for (kw_outer = 0; kw_outer < 1; kw_outer++) {
          g2s_load {
            load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
            load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
            load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))
          }
          barrier()
          g2s_store {
            store.owordx16(slm, ((tg_idx1 * 256) + 0), g2s_0[0], bcast16(true), (nil), (nil))
          }
          barrier()
          g2r_load {
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096) + 28)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088) + 28)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080) + 28)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072) + 28)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064) + 28)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056) + 28)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048) + 28)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
            load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044) + 28), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 4), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 8), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 12), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 16), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 20), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 24), ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040) + 28)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))
          }
          s2r_load {
            load.owordx16(slm, 0, b[0], bcast16(true), (nil), (nil))
            load.owordx16(slm, 256, b[256], bcast16(true), (nil), (nil))
            load.owordx16(slm, 512, b[512], bcast16(true), (nil), (nil))
            load.owordx16(slm, 768, b[768], bcast16(true), (nil), (nil))
          }
          mul {
            dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
            dpas.8x8(c[256], c[256], b[0], a[256])
            dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
            dpas.8x8(c[768], c[768], b[256], a[256])
            dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
            dpas.8x8(c[1280], c[1280], b[512], a[256])
            dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
            dpas.8x8(c[1792], c[1792], b[768], a[256])
          }
        }
      }
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2638)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
  alloc c_tmp_1[512] (mem_usage: 2638)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 128), c_tmp_1[128], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 256), c_tmp_1[256], bcast16(false), (nil), (nil))
  store.owordx8(dst, (((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432) + 384), c_tmp_1[384], bcast16(false), (nil), (nil))
}

=== After simplify_pass
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      load.hwordx2(wei, ((tg_idx1 * 288) + (kh * 96)), g2s_0[0], (bcast16(tg_idx1) < bcast16(1)), (nil), (nil))
      load.hwordx2(wei, (((tg_idx1 * 288) + (kh * 96)) + 64), g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)), (nil), (nil))
      load.hwordx4(wei, (((tg_idx1 * 288) + (kh * 96)) + 128), g2s_0[128], bcast16(false), (nil), (nil))
    }
    barrier()
    g2s_store {
      store.owordx16(slm, (tg_idx1 * 256), g2s_0[0], bcast16(true), (nil), (nil))
    }
    barrier()
    g2r_load {
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)), a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)), a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)), a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)), a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)), a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)), a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)), a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))), (nil), (nil))
      load.16xbytex4(src, ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)), a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))), (nil), (nil))
    }
    s2r_load {
      load.owordx16(slm, 0, b[0], bcast16(true), (nil), (nil))
      load.owordx16(slm, 256, b[256], bcast16(true), (nil), (nil))
      load.owordx16(slm, 512, b[512], bcast16(true), (nil), (nil))
      load.owordx16(slm, 768, b[768], bcast16(true), (nil), (nil))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  store.owordx8(dst, (((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)), c_tmp_0[0], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128), c_tmp_0[128], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256), c_tmp_0[256], bcast16(true), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384), c_tmp_0[384], bcast16(true), (nil), (nil))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432), c_tmp_1[0], bcast16(false), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560), c_tmp_1[128], bcast16(false), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688), c_tmp_1[256], bcast16(false), (nil), (nil))
  store.owordx8(dst, ((((oh * 32768) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816), c_tmp_1[384], bcast16(false), (nil), (nil))
}

=== After inject_send
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      alloc h_0[32] (mem_usage: 3946)
      h_0.u64(0) = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3946)
      h_1.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3946)
      h_2.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      alloc h_4[128] (mem_usage: 4042)
      h_4.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
      load.16xbytex4(src, h_4, a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4042)
      h_5.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
      load.16xbytex4(src, h_5, a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4042)
      h_6.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
      load.16xbytex4(src, h_6, a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4042)
      h_7.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
      load.16xbytex4(src, h_7, a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4042)
      h_8.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
      load.16xbytex4(src, h_8, a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4042)
      h_9.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
      load.16xbytex4(src, h_9, a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4042)
      h_10.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
      load.16xbytex4(src, h_10, a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4042)
      h_11.u64x16(0) = (bcast16(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2666)
  h_16.u64(0) = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2666)
  h_17.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2666)
  h_18.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2666)
  h_19.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2666)
  h_20.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2666)
  h_21.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2666)
  h_22.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2666)
  h_23.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After split_wide_stores
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      alloc h_0[32] (mem_usage: 3946)
      h_0.u64(0) = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3946)
      h_1.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3946)
      h_2.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      alloc h_4[128] (mem_usage: 4042)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)))
      h_4.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
      load.16xbytex4(src, h_4, a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4042)
      h_5.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)))
      h_5.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
      load.16xbytex4(src, h_5, a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4042)
      h_6.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)))
      h_6.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
      load.16xbytex4(src, h_6, a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4042)
      h_7.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)))
      h_7.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
      load.16xbytex4(src, h_7, a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4042)
      h_8.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)))
      h_8.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
      load.16xbytex4(src, h_8, a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4042)
      h_9.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)))
      h_9.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
      load.16xbytex4(src, h_9, a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4042)
      h_10.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)))
      h_10.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
      load.16xbytex4(src, h_10, a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4042)
      h_11.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)))
      h_11.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2666)
  h_16.u64(0) = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2666)
  h_17.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2666)
  h_18.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2666)
  h_19.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2666)
  h_20.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2666)
  h_21.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2666)
  h_22.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2666)
  h_23.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After lift_alloc
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      alloc h_0[32] (mem_usage: 3946)
      h_0.u64(0) = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3946)
      h_1.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3946)
      h_2.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      alloc h_4[128] (mem_usage: 4042)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)))
      h_4.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
      load.16xbytex4(src, h_4, a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4042)
      h_5.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)))
      h_5.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
      load.16xbytex4(src, h_5, a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4042)
      h_6.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)))
      h_6.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
      load.16xbytex4(src, h_6, a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4042)
      h_7.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)))
      h_7.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
      load.16xbytex4(src, h_7, a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4042)
      h_8.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)))
      h_8.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
      load.16xbytex4(src, h_8, a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4042)
      h_9.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)))
      h_9.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
      load.16xbytex4(src, h_9, a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4042)
      h_10.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)))
      h_10.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
      load.16xbytex4(src, h_10, a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4042)
      h_11.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)))
      h_11.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2666)
  h_16.u64(0) = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2666)
  h_17.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2666)
  h_18.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2666)
  h_19.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2666)
  h_20.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2666)
  h_21.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2666)
  h_22.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2666)
  h_23.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After lift_send_2d_header_store
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      alloc h_0[32] (mem_usage: 3946)
      h_0.u64(0) = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3946)
      h_1.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3946)
      h_2.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      alloc h_4[128] (mem_usage: 4042)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)))
      h_4.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
      load.16xbytex4(src, h_4, a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4042)
      h_5.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)))
      h_5.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
      load.16xbytex4(src, h_5, a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4042)
      h_6.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)))
      h_6.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
      load.16xbytex4(src, h_6, a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4042)
      h_7.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)))
      h_7.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
      load.16xbytex4(src, h_7, a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4042)
      h_8.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)))
      h_8.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
      load.16xbytex4(src, h_8, a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4042)
      h_9.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)))
      h_9.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
      load.16xbytex4(src, h_9, a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4042)
      h_10.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)))
      h_10.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
      load.16xbytex4(src, h_10, a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4042)
      h_11.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)))
      h_11.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2666)
  h_16.u64(0) = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2666)
  h_17.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2666)
  h_18.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2666)
  h_19.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2666)
  h_20.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2666)
  h_21.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2666)
  h_22.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2666)
  h_23.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After hoist_send_masks
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      alloc h_0[32] (mem_usage: 3946)
      h_0.u64(0) = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3946)
      h_1.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3946)
      h_2.u64(0) = (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      alloc h_4[128] (mem_usage: 4042)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)))
      h_4.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
      load.16xbytex4(src, h_4, a[0], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)) < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4042)
      h_5.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)))
      h_5.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
      load.16xbytex4(src, h_5, a[64], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)) < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4042)
      h_6.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)))
      h_6.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
      load.16xbytex4(src, h_6, a[128], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)) < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4042)
      h_7.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)))
      h_7.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
      load.16xbytex4(src, h_7, a[192], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)) < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4042)
      h_8.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)))
      h_8.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
      load.16xbytex4(src, h_8, a[256], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)) < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4042)
      h_9.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)))
      h_9.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
      load.16xbytex4(src, h_9, a[320], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)) < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4042)
      h_10.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)))
      h_10.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
      load.16xbytex4(src, h_10, a[384], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)) < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4042)
      h_11.u64x8(0) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)))
      h_11.u64x8(1) = (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(((oh + kh) + -1)) >= bcast16(0)) && (bcast16(((oh + kh) + -1)) < bcast16(1024))) && ((((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) >= bcast16(0)) && (((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)) < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  alloc c_tmp_0[512] (mem_usage: 2634)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2666)
  h_16.u64(0) = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2666)
  h_17.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2666)
  h_18.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2666)
  h_19.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2634)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2666)
  h_20.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2666)
  h_21.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2666)
  h_22.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2666)
  h_23.u64(0) = ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

cse_pass: add expression: (g_outer_od_oh_ow_outer_fused / 16)
cse_pass: add expression: (g_outer_od_oh_ow_outer_fused % 16)
cse_pass: add expression: (tg_idx1 * 288)
cse_pass: add expression: (u64(wei) + (tg_idx1 * 288))
cse_pass: add expression: (kh * 96)
cse_pass: add expression: ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
cse_pass: add usage: ((u64(wei) + (tg_idx1 * 288)) + (kh * 96)), total refs: 2
cse_pass: add usage: (u64(wei) + (tg_idx1 * 288)), total refs: 1
cse_pass: add usage: (tg_idx1 * 288), total refs: 1
cse_pass: add usage: (kh * 96), total refs: 1
cse_pass: add expression: (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 64)
cse_pass: add expression: (tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2)
cse_pass: add usage: ((u64(wei) + (tg_idx1 * 288)) + (kh * 96)), total refs: 3
cse_pass: add usage: (u64(wei) + (tg_idx1 * 288)), total refs: 1
cse_pass: add usage: (tg_idx1 * 288), total refs: 1
cse_pass: add usage: (kh * 96), total refs: 1
cse_pass: add expression: (((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) + 128)
cse_pass: add expression: (tg_idx1 * 16)
cse_pass: add expression: (oh * 4096)
cse_pass: add expression: (kh * 4096)
cse_pass: add expression: ((oh * 4096) + (kh * 4096))
cse_pass: add expression: (ow_outer * 256)
cse_pass: add expression: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256))
cse_pass: add expression: (ow_inner_outer * 64)
cse_pass: add expression: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64))
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 2
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 3
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 4
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 5
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 6
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 7
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076)
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4100), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 8
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4096), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068)))
cse_pass: add expression: (oh + kh)
cse_pass: add expression: ((oh + kh) + -1)
cse_pass: add usage: ((oh + kh) + -1), total refs: 2
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add expression: (ow_outer * 64)
cse_pass: add expression: (ow_inner_outer * 16)
cse_pass: add expression: ((ow_outer * 64) + (ow_inner_outer * 16))
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + -1)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 2
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 3
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 1)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 4
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 2)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 5
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 6
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 7
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 8
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + -1), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), ((ow_outer * 64) + (ow_inner_outer * 16)), (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + -1), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 9
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4092), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 10
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4088), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 3
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 4
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 9
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 10
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 1), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 1), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 2), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 11
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4084), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 12
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4080), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 5
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 6
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 11
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 12
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 3), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 3), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 4), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 13
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4076), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 14
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4072), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 7
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 8
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 13
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 14
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 5), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 5), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 6), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 15
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4068), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 16
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4064), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 9
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 10
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 15
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 16
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 7), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 7), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 8), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 17
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4060), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 18
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4056), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 11
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 12
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 17
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 18
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 9), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 9), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 10), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 19
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4052), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 20
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4048), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 13
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 14
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 19
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 20
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 18)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 11), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 11), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 12), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 21
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4044), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016)))
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), total refs: 8
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), total refs: 7
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), total refs: 6
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), total refs: 5
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), total refs: 4
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), total refs: 3
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), total refs: 2
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 22
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add usage: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)), total refs: 23
cse_pass: add usage: (((oh * 4096) + (kh * 4096)) + (ow_outer * 256)), total refs: 1
cse_pass: add usage: ((oh * 4096) + (kh * 4096)), total refs: 1
cse_pass: add usage: (oh * 4096), total refs: 1
cse_pass: add usage: (kh * 4096), total refs: 1
cse_pass: add usage: (ow_outer * 256), total refs: 1
cse_pass: add usage: (ow_inner_outer * 64), total refs: 1
cse_pass: add expression: (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)
cse_pass: add expression: ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012))
cse_pass: add expression: (bcast8(u64(src)) + ((((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4040), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4036), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4032), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4028), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4024), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4020), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4016), (((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) + -4012)))
cse_pass: add usage: ((oh + kh) + -1), total refs: 15
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: ((oh + kh) + -1), total refs: 16
cse_pass: add usage: (oh + kh), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 21
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 22
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 20)
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)
cse_pass: add expression: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21))
cse_pass: add usage: ((((ow_outer * 64) + (ow_inner_outer * 16)) + 13), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), (((ow_outer * 64) + (ow_inner_outer * 16)) + 21)), total refs: 2
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 13), total refs: 5
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 14), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 15), total refs: 4
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 16), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 17), total refs: 3
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 18), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 19), total refs: 2
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 20), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add usage: (((ow_outer * 64) + (ow_inner_outer * 16)) + 21), total refs: 1
cse_pass: add usage: ((ow_outer * 64) + (ow_inner_outer * 16)), total refs: 23
cse_pass: add usage: (ow_outer * 64), total refs: 1
cse_pass: add usage: (ow_inner_outer * 16), total refs: 1
cse_pass: add expression: (oh * 32768)
cse_pass: add expression: (u64(dst) + (oh * 32768))
cse_pass: add expression: (ow_outer * 2048)
cse_pass: add expression: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048))
cse_pass: add expression: (ow_inner_outer * 512)
cse_pass: add expression: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 2
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 128)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 3
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 256)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 4
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 384)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 5
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554432)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 6
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554560)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 7
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554688)
cse_pass: add usage: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)), total refs: 8
cse_pass: add usage: ((u64(dst) + (oh * 32768)) + (ow_outer * 2048)), total refs: 1
cse_pass: add usage: (u64(dst) + (oh * 32768)), total refs: 1
cse_pass: add usage: (oh * 32768), total refs: 1
cse_pass: add usage: (ow_outer * 2048), total refs: 1
cse_pass: add usage: (ow_inner_outer * 512), total refs: 1
cse_pass: add expression: ((((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) + 33554816)
cse_pass: assigning var: ((u64(wei) + (tg_idx1 * 288)) + (kh * 96)) -> tmp_0
cse_pass: add expression: (tmp_0 + 64)
cse_pass: add expression: (tmp_0 + 128)
cse_pass: assigning var: ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64)) -> tmp_1
cse_pass: add expression: (tmp_1 + -4100)
cse_pass: add expression: (tmp_1 + -4096)
cse_pass: assigning var: (tmp_1 + -4096) -> tmp_2
cse_pass: add expression: (tmp_1 + -4092)
cse_pass: assigning var: (tmp_1 + -4092) -> tmp_3
cse_pass: add expression: (tmp_1 + -4088)
cse_pass: assigning var: (tmp_1 + -4088) -> tmp_4
cse_pass: add expression: (tmp_1 + -4084)
cse_pass: assigning var: (tmp_1 + -4084) -> tmp_5
cse_pass: add expression: (tmp_1 + -4080)
cse_pass: assigning var: (tmp_1 + -4080) -> tmp_6
cse_pass: add expression: (tmp_1 + -4076)
cse_pass: assigning var: (tmp_1 + -4076) -> tmp_7
cse_pass: add expression: (tmp_1 + -4072)
cse_pass: assigning var: (tmp_1 + -4072) -> tmp_8
cse_pass: add expression: ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8)
cse_pass: add expression: (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
cse_pass: add expression: (tmp_1 + -4068)
cse_pass: assigning var: (tmp_1 + -4068) -> tmp_9
cse_pass: add expression: (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
cse_pass: assigning var: ((oh + kh) + -1) -> tmp_10
cse_pass: assigning var: ((ow_outer * 64) + (ow_inner_outer * 16)) -> tmp_11
cse_pass: add expression: (tmp_11 + -1)
cse_pass: add expression: (tmp_11 + 1)
cse_pass: assigning var: (tmp_11 + 1) -> tmp_12
cse_pass: add expression: (tmp_11 + 2)
cse_pass: assigning var: (tmp_11 + 2) -> tmp_13
cse_pass: add expression: (tmp_11 + 3)
cse_pass: assigning var: (tmp_11 + 3) -> tmp_14
cse_pass: add expression: (tmp_11 + 4)
cse_pass: assigning var: (tmp_11 + 4) -> tmp_15
cse_pass: add expression: (tmp_11 + 5)
cse_pass: assigning var: (tmp_11 + 5) -> tmp_16
cse_pass: add expression: (tmp_11 + 6)
cse_pass: assigning var: (tmp_11 + 6) -> tmp_17
cse_pass: add expression: (tmp_11 + 7)
cse_pass: assigning var: (tmp_11 + 7) -> tmp_18
cse_pass: add expression: ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
cse_pass: assigning var: ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18) -> tmp_19
cse_pass: add expression: (tmp_1 + -4064)
cse_pass: assigning var: (tmp_1 + -4064) -> tmp_20
cse_pass: add expression: (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
cse_pass: add expression: (tmp_1 + -4060)
cse_pass: assigning var: (tmp_1 + -4060) -> tmp_21
cse_pass: add expression: (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
cse_pass: add expression: (tmp_11 + 8)
cse_pass: assigning var: (tmp_11 + 8) -> tmp_22
cse_pass: add expression: (tmp_11 + 9)
cse_pass: assigning var: (tmp_11 + 9) -> tmp_23
cse_pass: add expression: (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
cse_pass: assigning var: (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23) -> tmp_24
cse_pass: add expression: (tmp_1 + -4056)
cse_pass: assigning var: (tmp_1 + -4056) -> tmp_25
cse_pass: add expression: (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
cse_pass: add expression: (tmp_1 + -4052)
cse_pass: assigning var: (tmp_1 + -4052) -> tmp_26
cse_pass: add expression: (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
cse_pass: add expression: (tmp_11 + 10)
cse_pass: assigning var: (tmp_11 + 10) -> tmp_27
cse_pass: add expression: (tmp_11 + 11)
cse_pass: assigning var: (tmp_11 + 11) -> tmp_28
cse_pass: add expression: (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
cse_pass: assigning var: (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28) -> tmp_29
cse_pass: add expression: (tmp_1 + -4048)
cse_pass: assigning var: (tmp_1 + -4048) -> tmp_30
cse_pass: add expression: (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
cse_pass: add expression: (tmp_1 + -4044)
cse_pass: assigning var: (tmp_1 + -4044) -> tmp_31
cse_pass: add expression: (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
cse_pass: add expression: (tmp_11 + 12)
cse_pass: assigning var: (tmp_11 + 12) -> tmp_32
cse_pass: add expression: (tmp_11 + 13)
cse_pass: assigning var: (tmp_11 + 13) -> tmp_33
cse_pass: add expression: (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
cse_pass: assigning var: (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33) -> tmp_34
cse_pass: add expression: (tmp_1 + -4040)
cse_pass: assigning var: (tmp_1 + -4040) -> tmp_35
cse_pass: add expression: (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
cse_pass: add expression: (tmp_1 + -4036)
cse_pass: assigning var: (tmp_1 + -4036) -> tmp_36
cse_pass: add expression: (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
cse_pass: add expression: (tmp_11 + 14)
cse_pass: assigning var: (tmp_11 + 14) -> tmp_37
cse_pass: add expression: (tmp_11 + 15)
cse_pass: assigning var: (tmp_11 + 15) -> tmp_38
cse_pass: add expression: (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
cse_pass: assigning var: (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38) -> tmp_39
cse_pass: add expression: (tmp_1 + -4032)
cse_pass: assigning var: (tmp_1 + -4032) -> tmp_40
cse_pass: add expression: (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
cse_pass: add expression: (tmp_1 + -4028)
cse_pass: assigning var: (tmp_1 + -4028) -> tmp_41
cse_pass: add expression: (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
cse_pass: add expression: (tmp_11 + 16)
cse_pass: assigning var: (tmp_11 + 16) -> tmp_42
cse_pass: add expression: (tmp_11 + 17)
cse_pass: assigning var: (tmp_11 + 17) -> tmp_43
cse_pass: add expression: (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
cse_pass: assigning var: (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43) -> tmp_44
cse_pass: add expression: (tmp_1 + -4024)
cse_pass: assigning var: (tmp_1 + -4024) -> tmp_45
cse_pass: add expression: (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
cse_pass: add expression: (tmp_1 + -4020)
cse_pass: assigning var: (tmp_1 + -4020) -> tmp_46
cse_pass: add expression: (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
cse_pass: add expression: (tmp_11 + 18)
cse_pass: assigning var: (tmp_11 + 18) -> tmp_47
cse_pass: add expression: (tmp_11 + 19)
cse_pass: assigning var: (tmp_11 + 19) -> tmp_48
cse_pass: add expression: (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
cse_pass: assigning var: (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48) -> tmp_49
cse_pass: add expression: (tmp_1 + -4016)
cse_pass: assigning var: (tmp_1 + -4016) -> tmp_50
cse_pass: add expression: (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50)
cse_pass: add expression: (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
cse_pass: add expression: (tmp_1 + -4012)
cse_pass: add expression: (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012))
cse_pass: add expression: (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
cse_pass: add expression: (tmp_11 + 20)
cse_pass: add expression: (tmp_11 + 21)
cse_pass: add expression: (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
cse_pass: assigning var: (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21)) -> tmp_51
cse_pass: assigning var: (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512)) -> tmp_52
cse_pass: add expression: (tmp_52 + 128)
cse_pass: add expression: (tmp_52 + 256)
cse_pass: add expression: (tmp_52 + 384)
cse_pass: add expression: (tmp_52 + 33554432)
cse_pass: add expression: (tmp_52 + 33554560)
cse_pass: add expression: (tmp_52 + 33554688)
cse_pass: add expression: (tmp_52 + 33554816)
=== After eliminate_common_subexprs
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((u64(wei) + (tg_idx1 * 288)) + (kh * 96))
      alloc h_0[32] (mem_usage: 3954)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 3954)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 3954)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 3946)
      h_3.u32(2) = u32((tg_idx1 * 16))
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
      tmp_48.s32 = (tmp_11 + 19)
      tmp_47.s32 = (tmp_11 + 18)
      tmp_1.s32 = ((((oh * 4096) + (kh * 4096)) + (ow_outer * 256)) + (ow_inner_outer * 64))
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = ((oh + kh) + -1)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_33.s32 = (tmp_11 + 13)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_42.s32 = (tmp_11 + 16)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_43.s32 = (tmp_11 + 17)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_37.s32 = (tmp_11 + 14)
      tmp_38.s32 = (tmp_11 + 15)
      tmp_32.s32 = (tmp_11 + 12)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_28.s32 = (tmp_11 + 11)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_27.s32 = (tmp_11 + 10)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_23.s32 = (tmp_11 + 9)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_22.s32 = (tmp_11 + 8)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_18.s32 = (tmp_11 + 7)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_17.s32 = (tmp_11 + 6)
      tmp_16.s32 = (tmp_11 + 5)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_15.s32 = (tmp_11 + 4)
      tmp_14.s32 = (tmp_11 + 3)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_13.s32 = (tmp_11 + 2)
      tmp_12.s32 = (tmp_11 + 1)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4206)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4206)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4190)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4174)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4158)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4142)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4126)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4110)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 3946)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 3946)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 3946)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 3946)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2642)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2674)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2674)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2674)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2674)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2642)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2674)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2674)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2674)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2674)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After hoist_exprs
alloc slm[1024] (mem_usage: 0)
local_id0.u16 = (nil)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
local_id2.u16 = (nil)
grid_idx0.s32 = (nil)
grid_idx2.s32 = (nil)
alloc dst[0] (mem_usage: 18)
alloc wei[0] (mem_usage: 18)
alloc src[0] (mem_usage: 18)
tg_idx0.s32 = 0
tg_idx1.s32 = local_id1
tg_idx2.s32 = local_id2
oc_outer.s32 = grid_idx0
mb_outer.s32 = grid_idx2
oc_inner_outer.s32 = tg_idx0
mb_inner_outer_ow_inner_outer_fused.s32 = tg_idx1
mb_inner_outer.s32 = 0
ow_inner_outer.s32 = mb_inner_outer_ow_inner_outer_fused
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
g_outer.s32 = 0
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
ic_inner_outer.s32 = tg_idx2
alloc c[2048] (mem_usage: 2122)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3146)
alloc a[512] (mem_usage: 3658)
alloc g2s_0[256] (mem_usage: 3914)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_54.s32 = 64
tmp_55.s32 = 128
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_58.s32 = -4024
tmp_59.s32 = -4044
tmp_60.s32 = (oh + -1)
tmp_61.s32 = -4020
tmp_33.s32 = (tmp_11 + 13)
tmp_62.s32 = -4028
tmp_63.s32 = -4040
tmp_42.s32 = (tmp_11 + 16)
tmp_64.s32 = -4036
tmp_43.s32 = (tmp_11 + 17)
tmp_65.s32 = -4032
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_66.s32 = -4048
tmp_28.s32 = (tmp_11 + 11)
tmp_67.s32 = -4052
tmp_27.s32 = (tmp_11 + 10)
tmp_68.s32 = -4056
tmp_23.s32 = (tmp_11 + 9)
tmp_69.s32 = -4060
tmp_22.s32 = (tmp_11 + 8)
tmp_70.s32 = -4064
tmp_18.s32 = (tmp_11 + 7)
tmp_71.s32 = -4068
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_72.s32 = -4072
tmp_73.s32 = -4076
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_74.s32 = -4080
tmp_75.s32 = -4084
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_76.s32 = -4088
tmp_77.s32 = -4092
tmp_78.s32 = -4096
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_79.s32 = -4016
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4658)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4658)
      h_1.u64(0) = (tmp_0 + tmp_54)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4658)
      h_2.u64(0) = (tmp_0 + tmp_55)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4650)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + tmp_58)
      tmp_31.s32 = (tmp_1 + tmp_59)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + tmp_61)
      tmp_41.s32 = (tmp_1 + tmp_62)
      tmp_35.s32 = (tmp_1 + tmp_63)
      tmp_36.s32 = (tmp_1 + tmp_64)
      tmp_40.s32 = (tmp_1 + tmp_65)
      tmp_30.s32 = (tmp_1 + tmp_66)
      tmp_26.s32 = (tmp_1 + tmp_67)
      tmp_25.s32 = (tmp_1 + tmp_68)
      tmp_21.s32 = (tmp_1 + tmp_69)
      tmp_20.s32 = (tmp_1 + tmp_70)
      tmp_9.s32 = (tmp_1 + tmp_71)
      tmp_8.s32 = (tmp_1 + tmp_72)
      tmp_7.s32 = (tmp_1 + tmp_73)
      tmp_6.s32 = (tmp_1 + tmp_74)
      tmp_5.s32 = (tmp_1 + tmp_75)
      tmp_4.s32 = (tmp_1 + tmp_76)
      tmp_3.s32 = (tmp_1 + tmp_77)
      alloc h_4[128] (mem_usage: 4830)
      tmp_2.s32 = (tmp_1 + tmp_78)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4830)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4822)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4814)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4806)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4798)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4790)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4782)
      tmp_50.s32 = (tmp_1 + tmp_79)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4650)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4650)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4650)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4650)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2642)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2674)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2674)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2674)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2674)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2642)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2674)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2674)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2674)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2674)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After optimize_alloc_let
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_54.s32 = 64
tmp_55.s32 = 128
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_58.s32 = -4024
tmp_59.s32 = -4044
tmp_60.s32 = (oh + -1)
tmp_61.s32 = -4020
tmp_33.s32 = (tmp_11 + 13)
tmp_62.s32 = -4028
tmp_63.s32 = -4040
tmp_42.s32 = (tmp_11 + 16)
tmp_64.s32 = -4036
tmp_43.s32 = (tmp_11 + 17)
tmp_65.s32 = -4032
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_66.s32 = -4048
tmp_28.s32 = (tmp_11 + 11)
tmp_67.s32 = -4052
tmp_27.s32 = (tmp_11 + 10)
tmp_68.s32 = -4056
tmp_23.s32 = (tmp_11 + 9)
tmp_69.s32 = -4060
tmp_22.s32 = (tmp_11 + 8)
tmp_70.s32 = -4064
tmp_18.s32 = (tmp_11 + 7)
tmp_71.s32 = -4068
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_72.s32 = -4072
tmp_73.s32 = -4076
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_74.s32 = -4080
tmp_75.s32 = -4084
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_76.s32 = -4088
tmp_77.s32 = -4092
tmp_78.s32 = -4096
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_79.s32 = -4016
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4610)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4610)
      h_1.u64(0) = (tmp_0 + tmp_54)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4610)
      h_2.u64(0) = (tmp_0 + tmp_55)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4602)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + tmp_58)
      tmp_31.s32 = (tmp_1 + tmp_59)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + tmp_61)
      tmp_41.s32 = (tmp_1 + tmp_62)
      tmp_35.s32 = (tmp_1 + tmp_63)
      tmp_36.s32 = (tmp_1 + tmp_64)
      tmp_40.s32 = (tmp_1 + tmp_65)
      tmp_30.s32 = (tmp_1 + tmp_66)
      tmp_26.s32 = (tmp_1 + tmp_67)
      tmp_25.s32 = (tmp_1 + tmp_68)
      tmp_21.s32 = (tmp_1 + tmp_69)
      tmp_20.s32 = (tmp_1 + tmp_70)
      tmp_9.s32 = (tmp_1 + tmp_71)
      tmp_8.s32 = (tmp_1 + tmp_72)
      tmp_7.s32 = (tmp_1 + tmp_73)
      tmp_6.s32 = (tmp_1 + tmp_74)
      tmp_5.s32 = (tmp_1 + tmp_75)
      tmp_4.s32 = (tmp_1 + tmp_76)
      tmp_3.s32 = (tmp_1 + tmp_77)
      alloc h_4[128] (mem_usage: 4782)
      tmp_2.s32 = (tmp_1 + tmp_78)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4782)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4774)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4766)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4758)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4750)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4742)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4734)
      tmp_50.s32 = (tmp_1 + tmp_79)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4602)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4602)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4602)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4602)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After fixup_if_conditions
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_54.s32 = 64
tmp_55.s32 = 128
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_58.s32 = -4024
tmp_59.s32 = -4044
tmp_60.s32 = (oh + -1)
tmp_61.s32 = -4020
tmp_33.s32 = (tmp_11 + 13)
tmp_62.s32 = -4028
tmp_63.s32 = -4040
tmp_42.s32 = (tmp_11 + 16)
tmp_64.s32 = -4036
tmp_43.s32 = (tmp_11 + 17)
tmp_65.s32 = -4032
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_66.s32 = -4048
tmp_28.s32 = (tmp_11 + 11)
tmp_67.s32 = -4052
tmp_27.s32 = (tmp_11 + 10)
tmp_68.s32 = -4056
tmp_23.s32 = (tmp_11 + 9)
tmp_69.s32 = -4060
tmp_22.s32 = (tmp_11 + 8)
tmp_70.s32 = -4064
tmp_18.s32 = (tmp_11 + 7)
tmp_71.s32 = -4068
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_72.s32 = -4072
tmp_73.s32 = -4076
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_74.s32 = -4080
tmp_75.s32 = -4084
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_76.s32 = -4088
tmp_77.s32 = -4092
tmp_78.s32 = -4096
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_79.s32 = -4016
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4610)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4610)
      h_1.u64(0) = (tmp_0 + tmp_54)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4610)
      h_2.u64(0) = (tmp_0 + tmp_55)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4602)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + tmp_58)
      tmp_31.s32 = (tmp_1 + tmp_59)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + tmp_61)
      tmp_41.s32 = (tmp_1 + tmp_62)
      tmp_35.s32 = (tmp_1 + tmp_63)
      tmp_36.s32 = (tmp_1 + tmp_64)
      tmp_40.s32 = (tmp_1 + tmp_65)
      tmp_30.s32 = (tmp_1 + tmp_66)
      tmp_26.s32 = (tmp_1 + tmp_67)
      tmp_25.s32 = (tmp_1 + tmp_68)
      tmp_21.s32 = (tmp_1 + tmp_69)
      tmp_20.s32 = (tmp_1 + tmp_70)
      tmp_9.s32 = (tmp_1 + tmp_71)
      tmp_8.s32 = (tmp_1 + tmp_72)
      tmp_7.s32 = (tmp_1 + tmp_73)
      tmp_6.s32 = (tmp_1 + tmp_74)
      tmp_5.s32 = (tmp_1 + tmp_75)
      tmp_4.s32 = (tmp_1 + tmp_76)
      tmp_3.s32 = (tmp_1 + tmp_77)
      alloc h_4[128] (mem_usage: 4782)
      tmp_2.s32 = (tmp_1 + tmp_78)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4782)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4774)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4766)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4758)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4750)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4742)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4734)
      tmp_50.s32 = (tmp_1 + tmp_79)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4602)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4602)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4602)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4602)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After unroll_loops
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_54.s32 = 64
tmp_55.s32 = 128
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_58.s32 = -4024
tmp_59.s32 = -4044
tmp_60.s32 = (oh + -1)
tmp_61.s32 = -4020
tmp_33.s32 = (tmp_11 + 13)
tmp_62.s32 = -4028
tmp_63.s32 = -4040
tmp_42.s32 = (tmp_11 + 16)
tmp_64.s32 = -4036
tmp_43.s32 = (tmp_11 + 17)
tmp_65.s32 = -4032
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_66.s32 = -4048
tmp_28.s32 = (tmp_11 + 11)
tmp_67.s32 = -4052
tmp_27.s32 = (tmp_11 + 10)
tmp_68.s32 = -4056
tmp_23.s32 = (tmp_11 + 9)
tmp_69.s32 = -4060
tmp_22.s32 = (tmp_11 + 8)
tmp_70.s32 = -4064
tmp_18.s32 = (tmp_11 + 7)
tmp_71.s32 = -4068
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_72.s32 = -4072
tmp_73.s32 = -4076
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_74.s32 = -4080
tmp_75.s32 = -4084
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_76.s32 = -4088
tmp_77.s32 = -4092
tmp_78.s32 = -4096
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_79.s32 = -4016
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4610)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4610)
      h_1.u64(0) = (tmp_0 + tmp_54)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4610)
      h_2.u64(0) = (tmp_0 + tmp_55)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4602)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + tmp_58)
      tmp_31.s32 = (tmp_1 + tmp_59)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + tmp_61)
      tmp_41.s32 = (tmp_1 + tmp_62)
      tmp_35.s32 = (tmp_1 + tmp_63)
      tmp_36.s32 = (tmp_1 + tmp_64)
      tmp_40.s32 = (tmp_1 + tmp_65)
      tmp_30.s32 = (tmp_1 + tmp_66)
      tmp_26.s32 = (tmp_1 + tmp_67)
      tmp_25.s32 = (tmp_1 + tmp_68)
      tmp_21.s32 = (tmp_1 + tmp_69)
      tmp_20.s32 = (tmp_1 + tmp_70)
      tmp_9.s32 = (tmp_1 + tmp_71)
      tmp_8.s32 = (tmp_1 + tmp_72)
      tmp_7.s32 = (tmp_1 + tmp_73)
      tmp_6.s32 = (tmp_1 + tmp_74)
      tmp_5.s32 = (tmp_1 + tmp_75)
      tmp_4.s32 = (tmp_1 + tmp_76)
      tmp_3.s32 = (tmp_1 + tmp_77)
      alloc h_4[128] (mem_usage: 4782)
      tmp_2.s32 = (tmp_1 + tmp_78)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4782)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4774)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4766)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4758)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4750)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4742)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4734)
      tmp_50.s32 = (tmp_1 + tmp_79)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4602)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4602)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4602)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4602)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After simplify_pass
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After optimize_alloc_let
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After fix_int32_overflow
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = ((ow_outer * 64) + (ow_inner_outer * 16))
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = (((oh * 4096) + (ow_outer * 256)) + (ow_inner_outer * 64))
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = ((kh * 4096) + tmp_57)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After optimize_peephole
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = mad((ow_outer * 64), ow_inner_outer, 16)
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = mad(mad((oh * 4096), ow_outer, 256), ow_inner_outer, 64)
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = mad(tmp_57, kh, 4096)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After optimize_barrier
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = mad((ow_outer * 64), ow_inner_outer, 16)
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = mad(mad((oh * 4096), ow_outer, 256), ow_inner_outer, 64)
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = mad(tmp_57, kh, 4096)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

=== After inject_bank_conflict_attribute
alloc slm[1024] (mem_usage: 0)
local_id1.u16 = (nil)
grid_idx1.s32 = (nil)
alloc dst[0] (mem_usage: 6)
alloc wei[0] (mem_usage: 6)
alloc src[0] (mem_usage: 6)
tg_idx1.s32 = local_id1
ow_inner_outer.s32 = tg_idx1
g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
alloc c[2048] (mem_usage: 2074)
c_zero_out {
  c.f32x16(0) = bcast16(0)
  c.f32x16(1) = bcast16(0)
  c.f32x16(2) = bcast16(0)
  c.f32x16(3) = bcast16(0)
  c.f32x16(4) = bcast16(0)
  c.f32x16(5) = bcast16(0)
  c.f32x16(6) = bcast16(0)
  c.f32x16(7) = bcast16(0)
  c.f32x16(8) = bcast16(0)
  c.f32x16(9) = bcast16(0)
  c.f32x16(10) = bcast16(0)
  c.f32x16(11) = bcast16(0)
  c.f32x16(12) = bcast16(0)
  c.f32x16(13) = bcast16(0)
  c.f32x16(14) = bcast16(0)
  c.f32x16(15) = bcast16(0)
  c.f32x16(16) = bcast16(0)
  c.f32x16(17) = bcast16(0)
  c.f32x16(18) = bcast16(0)
  c.f32x16(19) = bcast16(0)
  c.f32x16(20) = bcast16(0)
  c.f32x16(21) = bcast16(0)
  c.f32x16(22) = bcast16(0)
  c.f32x16(23) = bcast16(0)
  c.f32x16(24) = bcast16(0)
  c.f32x16(25) = bcast16(0)
  c.f32x16(26) = bcast16(0)
  c.f32x16(27) = bcast16(0)
  c.f32x16(28) = bcast16(0)
  c.f32x16(29) = bcast16(0)
  c.f32x16(30) = bcast16(0)
  c.f32x16(31) = bcast16(0)
}
alloc b[1024] (mem_usage: 3098)
alloc a[512] (mem_usage: 3610)
alloc g2s_0[256] (mem_usage: 3866)
tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
tmp_56.u32 = u32((tg_idx1 * 16))
tmp_11.s32 = mad((ow_outer * 64), ow_inner_outer, 16)
tmp_48.s32 = (tmp_11 + 19)
tmp_47.s32 = (tmp_11 + 18)
tmp_57.s32 = mad(mad((oh * 4096), ow_outer, 256), ow_inner_outer, 64)
tmp_60.s32 = (oh + -1)
tmp_33.s32 = (tmp_11 + 13)
tmp_42.s32 = (tmp_11 + 16)
tmp_43.s32 = (tmp_11 + 17)
tmp_37.s32 = (tmp_11 + 14)
tmp_38.s32 = (tmp_11 + 15)
tmp_32.s32 = (tmp_11 + 12)
tmp_28.s32 = (tmp_11 + 11)
tmp_27.s32 = (tmp_11 + 10)
tmp_23.s32 = (tmp_11 + 9)
tmp_22.s32 = (tmp_11 + 8)
tmp_18.s32 = (tmp_11 + 7)
tmp_17.s32 = (tmp_11 + 6)
tmp_16.s32 = (tmp_11 + 5)
tmp_15.s32 = (tmp_11 + 4)
tmp_14.s32 = (tmp_11 + 3)
tmp_13.s32 = (tmp_11 + 2)
tmp_12.s32 = (tmp_11 + 1)
tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
compute_loop {
  for (kh = 0; kh < 3; kh++) {
    g2s_load {
      tmp_0.u64 = ((kh * 96) + tmp_53)
      alloc h_0[32] (mem_usage: 4518)
      h_0.u64(0) = tmp_0
      load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
      alloc h_1[32] (mem_usage: 4518)
      h_1.u64(0) = (tmp_0 + 64)
      load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
      alloc h_2[32] (mem_usage: 4518)
      h_2.u64(0) = (tmp_0 + 128)
      load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
    }
    barrier()
    g2s_store {
      alloc h_3[32] (mem_usage: 4510)
      h_3.u32(2) = tmp_56
      store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
    }
    barrier()
    g2r_load {
      tmp_1.s32 = mad(tmp_57, kh, 4096)
      tmp_45.s32 = (tmp_1 + -4024)
      tmp_31.s32 = (tmp_1 + -4044)
      tmp_10.s32 = (kh + tmp_60)
      tmp_46.s32 = (tmp_1 + -4020)
      tmp_41.s32 = (tmp_1 + -4028)
      tmp_35.s32 = (tmp_1 + -4040)
      tmp_36.s32 = (tmp_1 + -4036)
      tmp_40.s32 = (tmp_1 + -4032)
      tmp_30.s32 = (tmp_1 + -4048)
      tmp_26.s32 = (tmp_1 + -4052)
      tmp_25.s32 = (tmp_1 + -4056)
      tmp_21.s32 = (tmp_1 + -4060)
      tmp_20.s32 = (tmp_1 + -4064)
      tmp_9.s32 = (tmp_1 + -4068)
      tmp_8.s32 = (tmp_1 + -4072)
      tmp_7.s32 = (tmp_1 + -4076)
      tmp_6.s32 = (tmp_1 + -4080)
      tmp_5.s32 = (tmp_1 + -4084)
      tmp_4.s32 = (tmp_1 + -4088)
      tmp_3.s32 = (tmp_1 + -4092)
      alloc h_4[128] (mem_usage: 4690)
      tmp_2.s32 = (tmp_1 + -4096)
      h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
      h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
      load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
      alloc h_5[128] (mem_usage: 4690)
      h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
      h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
      load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
      alloc h_6[128] (mem_usage: 4682)
      h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
      h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
      load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
      alloc h_7[128] (mem_usage: 4674)
      h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
      h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
      load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
      alloc h_8[128] (mem_usage: 4666)
      h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
      h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
      load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
      alloc h_9[128] (mem_usage: 4658)
      h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
      h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
      load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
      alloc h_10[128] (mem_usage: 4650)
      h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
      h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
      load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
      alloc h_11[128] (mem_usage: 4642)
      tmp_50.s32 = (tmp_1 + -4016)
      h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
      h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
      load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
    }
    s2r_load {
      alloc h_12[32] (mem_usage: 4510)
      h_12.s32(2) = 0
      load.owordx16(slm, h_12, b[0], bcast16(true))
      alloc h_13[32] (mem_usage: 4510)
      h_13.s32(2) = 16
      load.owordx16(slm, h_13, b[256], bcast16(true))
      alloc h_14[32] (mem_usage: 4510)
      h_14.s32(2) = 32
      load.owordx16(slm, h_14, b[512], bcast16(true))
      alloc h_15[32] (mem_usage: 4510)
      h_15.s32(2) = 48
      load.owordx16(slm, h_15, b[768], bcast16(true))
    }
    mul {
      dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
      dpas.8x8(c[256], c[256], b[0], a[256])
      dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
      dpas.8x8(c[768], c[768], b[256], a[256])
      dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
      dpas.8x8(c[1280], c[1280], b[512], a[256])
      dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
      dpas.8x8(c[1792], c[1792], b[768], a[256])
    }
  }
}
c_store {
  tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
  alloc c_tmp_0[512] (mem_usage: 2594)
  reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
  alloc h_16[32] (mem_usage: 2626)
  h_16.u64(0) = tmp_52
  store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
  alloc h_17[32] (mem_usage: 2626)
  h_17.u64(0) = (tmp_52 + 128)
  store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
  alloc h_18[32] (mem_usage: 2626)
  h_18.u64(0) = (tmp_52 + 256)
  store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
  alloc h_19[32] (mem_usage: 2626)
  h_19.u64(0) = (tmp_52 + 384)
  store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
  alloc c_tmp_1[512] (mem_usage: 2594)
  reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
  alloc h_20[32] (mem_usage: 2626)
  h_20.u64(0) = (tmp_52 + 33554432)
  store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
  alloc h_21[32] (mem_usage: 2626)
  h_21.u64(0) = (tmp_52 + 33554560)
  store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
  alloc h_22[32] (mem_usage: 2626)
  h_22.u64(0) = (tmp_52 + 33554688)
  store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
  alloc h_23[32] (mem_usage: 2626)
  h_23.u64(0) = (tmp_52 + 33554816)
  store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
}

Convolution kernel body:
kernel {
  alloc slm[1024] (mem_usage: 0)
  local_id1.u16 = (nil)
  grid_idx1.s32 = (nil)
  alloc dst[0] (mem_usage: 6)
  alloc wei[0] (mem_usage: 6)
  alloc src[0] (mem_usage: 6)
  tg_idx1.s32 = local_id1
  ow_inner_outer.s32 = tg_idx1
  g_outer_od_oh_ow_outer_fused.s32 = grid_idx1
  oh.s32 = (g_outer_od_oh_ow_outer_fused / 16)
  ow_outer.s32 = (g_outer_od_oh_ow_outer_fused % 16)
  alloc c[2048] (mem_usage: 2074)
  c_zero_out {
    c.f32x16(0) = bcast16(0)
    c.f32x16(1) = bcast16(0)
    c.f32x16(2) = bcast16(0)
    c.f32x16(3) = bcast16(0)
    c.f32x16(4) = bcast16(0)
    c.f32x16(5) = bcast16(0)
    c.f32x16(6) = bcast16(0)
    c.f32x16(7) = bcast16(0)
    c.f32x16(8) = bcast16(0)
    c.f32x16(9) = bcast16(0)
    c.f32x16(10) = bcast16(0)
    c.f32x16(11) = bcast16(0)
    c.f32x16(12) = bcast16(0)
    c.f32x16(13) = bcast16(0)
    c.f32x16(14) = bcast16(0)
    c.f32x16(15) = bcast16(0)
    c.f32x16(16) = bcast16(0)
    c.f32x16(17) = bcast16(0)
    c.f32x16(18) = bcast16(0)
    c.f32x16(19) = bcast16(0)
    c.f32x16(20) = bcast16(0)
    c.f32x16(21) = bcast16(0)
    c.f32x16(22) = bcast16(0)
    c.f32x16(23) = bcast16(0)
    c.f32x16(24) = bcast16(0)
    c.f32x16(25) = bcast16(0)
    c.f32x16(26) = bcast16(0)
    c.f32x16(27) = bcast16(0)
    c.f32x16(28) = bcast16(0)
    c.f32x16(29) = bcast16(0)
    c.f32x16(30) = bcast16(0)
    c.f32x16(31) = bcast16(0)
  }
  alloc b[1024] (mem_usage: 3098)
  alloc a[512] (mem_usage: 3610)
  alloc g2s_0[256] (mem_usage: 3866)
  tmp_53.u64 = (u64(wei) + (tg_idx1 * 288))
  tmp_56.u32 = u32((tg_idx1 * 16))
  tmp_11.s32 = mad((ow_outer * 64), ow_inner_outer, 16)
  tmp_48.s32 = (tmp_11 + 19)
  tmp_47.s32 = (tmp_11 + 18)
  tmp_57.s32 = mad(mad((oh * 4096), ow_outer, 256), ow_inner_outer, 64)
  tmp_60.s32 = (oh + -1)
  tmp_33.s32 = (tmp_11 + 13)
  tmp_42.s32 = (tmp_11 + 16)
  tmp_43.s32 = (tmp_11 + 17)
  tmp_37.s32 = (tmp_11 + 14)
  tmp_38.s32 = (tmp_11 + 15)
  tmp_32.s32 = (tmp_11 + 12)
  tmp_28.s32 = (tmp_11 + 11)
  tmp_27.s32 = (tmp_11 + 10)
  tmp_23.s32 = (tmp_11 + 9)
  tmp_22.s32 = (tmp_11 + 8)
  tmp_18.s32 = (tmp_11 + 7)
  tmp_17.s32 = (tmp_11 + 6)
  tmp_16.s32 = (tmp_11 + 5)
  tmp_15.s32 = (tmp_11 + 4)
  tmp_14.s32 = (tmp_11 + 3)
  tmp_13.s32 = (tmp_11 + 2)
  tmp_12.s32 = (tmp_11 + 1)
  tmp_19.s32x16 = ((tmp_11 + -1), tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18)
  tmp_24.s32x16 = (tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23)
  tmp_29.s32x16 = (tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_15, tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28)
  tmp_34.s32x16 = (tmp_16, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_17, tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33)
  tmp_39.s32x16 = (tmp_18, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_22, tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38)
  tmp_44.s32x16 = (tmp_23, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_27, tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43)
  tmp_49.s32x16 = (tmp_28, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_32, tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48)
  tmp_51.s32x16 = (tmp_33, tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), tmp_37, tmp_38, tmp_42, tmp_43, tmp_47, tmp_48, (tmp_11 + 20), (tmp_11 + 21))
  compute_loop {
    for (kh = 0; kh < 3; kh++) {
      g2s_load {
        tmp_0.u64 = ((kh * 96) + tmp_53)
        alloc h_0[32] (mem_usage: 4518)
        h_0.u64(0) = tmp_0
        load.hwordx2(wei, h_0, g2s_0[0], (bcast16(tg_idx1) < bcast16(1)))
        alloc h_1[32] (mem_usage: 4518)
        h_1.u64(0) = (tmp_0 + 64)
        load.hwordx2(wei, h_1, g2s_0[64], ((tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, tg_idx1, 2, 2, 2, 2, 2, 2, 2, 2) < bcast16(1)))
        alloc h_2[32] (mem_usage: 4518)
        h_2.u64(0) = (tmp_0 + 128)
        load.hwordx4(wei, h_2, g2s_0[128], bcast16(false))
      }
      barrier()
      g2s_store {
        alloc h_3[32] (mem_usage: 4510)
        h_3.u32(2) = tmp_56
        store.owordx16(slm, h_3, g2s_0[0], bcast16(true))
      }
      barrier()
      g2r_load {
        tmp_1.s32 = mad(tmp_57, kh, 4096)
        tmp_45.s32 = (tmp_1 + -4024)
        tmp_31.s32 = (tmp_1 + -4044)
        tmp_10.s32 = (kh + tmp_60)
        tmp_46.s32 = (tmp_1 + -4020)
        tmp_41.s32 = (tmp_1 + -4028)
        tmp_35.s32 = (tmp_1 + -4040)
        tmp_36.s32 = (tmp_1 + -4036)
        tmp_40.s32 = (tmp_1 + -4032)
        tmp_30.s32 = (tmp_1 + -4048)
        tmp_26.s32 = (tmp_1 + -4052)
        tmp_25.s32 = (tmp_1 + -4056)
        tmp_21.s32 = (tmp_1 + -4060)
        tmp_20.s32 = (tmp_1 + -4064)
        tmp_9.s32 = (tmp_1 + -4068)
        tmp_8.s32 = (tmp_1 + -4072)
        tmp_7.s32 = (tmp_1 + -4076)
        tmp_6.s32 = (tmp_1 + -4080)
        tmp_5.s32 = (tmp_1 + -4084)
        tmp_4.s32 = (tmp_1 + -4088)
        tmp_3.s32 = (tmp_1 + -4092)
        alloc h_4[128] (mem_usage: 4690)
        tmp_2.s32 = (tmp_1 + -4096)
        h_4.u64x8(0) = (bcast8(u64(src)) + ((tmp_1 + -4100), tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8))
        h_4.u64x8(1) = (bcast8(u64(src)) + (tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9))
        load.16xbytex4(src, h_4, a[0], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_19 >= bcast16(0)) && (tmp_19 < bcast16(1024)))))
        alloc h_5[128] (mem_usage: 4690)
        h_5.u64x8(0) = (bcast8(u64(src)) + (tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20))
        h_5.u64x8(1) = (bcast8(u64(src)) + (tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21))
        load.16xbytex4(src, h_5, a[64], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_24 >= bcast16(0)) && (tmp_24 < bcast16(1024)))))
        alloc h_6[128] (mem_usage: 4682)
        h_6.u64x8(0) = (bcast8(u64(src)) + (tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25))
        h_6.u64x8(1) = (bcast8(u64(src)) + (tmp_6, tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26))
        load.16xbytex4(src, h_6, a[128], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_29 >= bcast16(0)) && (tmp_29 < bcast16(1024)))))
        alloc h_7[128] (mem_usage: 4674)
        h_7.u64x8(0) = (bcast8(u64(src)) + (tmp_7, tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30))
        h_7.u64x8(1) = (bcast8(u64(src)) + (tmp_8, tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31))
        load.16xbytex4(src, h_7, a[192], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_34 >= bcast16(0)) && (tmp_34 < bcast16(1024)))))
        alloc h_8[128] (mem_usage: 4666)
        h_8.u64x8(0) = (bcast8(u64(src)) + (tmp_9, tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35))
        h_8.u64x8(1) = (bcast8(u64(src)) + (tmp_20, tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36))
        load.16xbytex4(src, h_8, a[256], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_39 >= bcast16(0)) && (tmp_39 < bcast16(1024)))))
        alloc h_9[128] (mem_usage: 4658)
        h_9.u64x8(0) = (bcast8(u64(src)) + (tmp_21, tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40))
        h_9.u64x8(1) = (bcast8(u64(src)) + (tmp_25, tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41))
        load.16xbytex4(src, h_9, a[320], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_44 >= bcast16(0)) && (tmp_44 < bcast16(1024)))))
        alloc h_10[128] (mem_usage: 4650)
        h_10.u64x8(0) = (bcast8(u64(src)) + (tmp_26, tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45))
        h_10.u64x8(1) = (bcast8(u64(src)) + (tmp_30, tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46))
        load.16xbytex4(src, h_10, a[384], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_49 >= bcast16(0)) && (tmp_49 < bcast16(1024)))))
        alloc h_11[128] (mem_usage: 4642)
        tmp_50.s32 = (tmp_1 + -4016)
        h_11.u64x8(0) = (bcast8(u64(src)) + (tmp_31, tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50))
        h_11.u64x8(1) = (bcast8(u64(src)) + (tmp_35, tmp_36, tmp_40, tmp_41, tmp_45, tmp_46, tmp_50, (tmp_1 + -4012)))
        load.16xbytex4(src, h_11, a[448], (((bcast16(tmp_10) >= bcast16(0)) && (bcast16(tmp_10) < bcast16(1024))) && ((tmp_51 >= bcast16(0)) && (tmp_51 < bcast16(1024)))))
      }
      s2r_load {
        alloc h_12[32] (mem_usage: 4510)
        h_12.s32(2) = 0
        load.owordx16(slm, h_12, b[0], bcast16(true))
        alloc h_13[32] (mem_usage: 4510)
        h_13.s32(2) = 16
        load.owordx16(slm, h_13, b[256], bcast16(true))
        alloc h_14[32] (mem_usage: 4510)
        h_14.s32(2) = 32
        load.owordx16(slm, h_14, b[512], bcast16(true))
        alloc h_15[32] (mem_usage: 4510)
        h_15.s32(2) = 48
        load.owordx16(slm, h_15, b[768], bcast16(true))
      }
      mul {
        dpas.8x8(c[0], c[0], b[0], a[0]) {Atomic}
        dpas.8x8(c[256], c[256], b[0], a[256])
        dpas.8x8(c[512], c[512], b[256], a[0]) {Atomic}
        dpas.8x8(c[768], c[768], b[256], a[256])
        dpas.8x8(c[1024], c[1024], b[512], a[0]) {Atomic}
        dpas.8x8(c[1280], c[1280], b[512], a[256])
        dpas.8x8(c[1536], c[1536], b[768], a[0]) {Atomic}
        dpas.8x8(c[1792], c[1792], b[768], a[256])
      }
    }
  }
  c_store {
    tmp_52.u64 = (((u64(dst) + (oh * 32768)) + (ow_outer * 2048)) + (ow_inner_outer * 512))
    alloc c_tmp_0[512] (mem_usage: 2594)
    reorder[2c16f8c:f32, 16f16c:f16](c_tmp_0, c)
    alloc h_16[32] (mem_usage: 2626)
    h_16.u64(0) = tmp_52
    store.owordx8(dst, h_16, c_tmp_0[0], bcast16(true))
    alloc h_17[32] (mem_usage: 2626)
    h_17.u64(0) = (tmp_52 + 128)
    store.owordx8(dst, h_17, c_tmp_0[128], bcast16(true))
    alloc h_18[32] (mem_usage: 2626)
    h_18.u64(0) = (tmp_52 + 256)
    store.owordx8(dst, h_18, c_tmp_0[256], bcast16(true))
    alloc h_19[32] (mem_usage: 2626)
    h_19.u64(0) = (tmp_52 + 384)
    store.owordx8(dst, h_19, c_tmp_0[384], bcast16(true))
    alloc c_tmp_1[512] (mem_usage: 2594)
    reorder[2c16f8c:f32 offset: 256, 16f16c:f16](c_tmp_1, c)
    alloc h_20[32] (mem_usage: 2626)
    h_20.u64(0) = (tmp_52 + 33554432)
    store.owordx8(dst, h_20, c_tmp_1[0], bcast16(false))
    alloc h_21[32] (mem_usage: 2626)
    h_21.u64(0) = (tmp_52 + 33554560)
    store.owordx8(dst, h_21, c_tmp_1[128], bcast16(false))
    alloc h_22[32] (mem_usage: 2626)
    h_22.u64(0) = (tmp_52 + 33554688)
    store.owordx8(dst, h_22, c_tmp_1[256], bcast16(false))
    alloc h_23[32] (mem_usage: 2626)
    h_23.u64(0) = (tmp_52 + 33554816)
    store.owordx8(dst, h_23, c_tmp_1[384], bcast16(false))
  }
}

Trace Profile:
          Total Time:           153.418 ms
     Compute Builder: interval   99.140 ms, total   64.621 % recorded time
       simplify_pass: interval   27.783 ms, total   18.109 % recorded time
eliminate_common_sub: interval   14.699 ms, total    9.581 % recorded time
         inject_send: interval    5.297 ms, total    3.453 % recorded time
       GEMM Schedule: interval    2.632 ms, total    1.715 % recorded time
         hoist_exprs: interval    1.617 ms, total    1.054 % recorded time
    Create Inital IR: interval    0.463 ms, total    0.302 % recorded time
  fix_int32_overflow: interval    0.332 ms, total    0.216 % recorded time
   merge_slm_buffers: interval    0.281 ms, total    0.183 % recorded time
inject_external_var_: interval    0.267 ms, total    0.174 % recorded time
inject_simple_slm_bu: interval    0.239 ms, total    0.156 % recorded time
  optimize_alloc_let: interval    0.126 ms, total    0.082 % recorded time
   optimize_peephole: interval    0.120 ms, total    0.078 % recorded time
          lift_alloc: interval    0.091 ms, total    0.059 % recorded time
   split_wide_stores: interval    0.063 ms, total    0.041 % recorded time
lift_send_2d_header_: interval    0.061 ms, total    0.040 % recorded time
lift_buffer_offsets_: interval    0.059 ms, total    0.039 % recorded time
    hoist_send_masks: interval    0.057 ms, total    0.037 % recorded time
inject_bank_conflict: interval    0.038 ms, total    0.025 % recorded time
        unroll_loops: interval    0.022 ms, total    0.014 % recorded time
 fixup_if_conditions: interval    0.022 ms, total    0.014 % recorded time
    optimize_barrier: interval    0.010 ms, total    0.007 % recorded time

Register usage estimate:         156
IR register usage:               147
IR register usage (without let): 124
Bank conflict allocation:
    Search time: 0.0229492 ms
    Status: OK
    Steps: 4
    Bundle check: False
Actual register usage:           157
[WARNING] conv_kernel_t register usage underestimated: estimate = 156, actual = 157
